[module booleanServices('http://www.eclipse.org/emf/2002/Ecore')/]

[comment @main/]
[template public test(p : ecore::EPackage)]
  
  [file ('oclAnyTests', overwrite)]
    @Test true.oclAsType(Boolean) => [true.oclAsType(Boolean)/]
    @Test true.oclIsUndefined() => [true = null/]
    @Test true.oclIsTypeOf(Boolean) => [true.oclIsTypeOf(Boolean)/]
    @Test true.oclIsTypeOf(EPackage) => [true.oclIsTypeOf(ecore::EPackage)/]
    @Test true.oclIsKindOf(Boolean) => [true.oclIsKindOf(Boolean)/]
    @Test true.oclIsKindOf(EPackage) => [true.oclIsKindOf(ecore::EPackage)/]
    @Test true = false => [true = false/]
    @Test true = true => [true = true/]
    @Test false = true => [false = true/]
    @Test false = false => [false = false/]
    @Test true <> false => [true <> false/]
    @Test true <> true => [true <> true/]
    @Test false <> true => [false <> true/]
    @Test false <> false => [false <> false/]
    @Test true.toString() => [true.toString()/]
  [/file]
  
  [file ('simpleTest', overwrite)]
    @Test not true => [not true/]
    @Test not false => [not false/]
    @Test true and false => [true and false/]
    @Test true and true => [true and true/]
    @Test false and true => [false and true/]
    @Test false and false => [false and false/]
    @Test true or false => [true or false/]
    @Test true or true => [true or true/]
    @Test false or true => [false or true/]
    @Test false or false => [false or false/]
    @Test true xor false => [true xor false/]
    @Test true xor true => [true xor true/]
    @Test false xor true => [false xor true/]
    @Test false xor false => [false xor false/]
    @Test true implies false => [true implies false/]
    @Test true implies true => [true implies true/]
    @Test false implies true => [false implies true/]
    @Test false implies false => [false implies false/]
    @Test false._and(true) => [false and true/]
    @Test true._and(false) => [true and false/]
    @Test false._or(true) => [false or true/]
    @Test true._or(false) => [true or false/]
    @Test false._implies(true) => [false implies true/]
    @Test true._implies(false) => [true implies false/]
    @Test true._not() => [not true/]
    @Test false._not() => [not false/]
    @Test false._xor(true) => [false xor true/]
    @Test true._xor(false) => [true xor false/]
    @Test true.toString() => [true.toString()/]
    @Test false.toString() => [false.toString()/]
  [/file]
  
  [file ('complexTest', overwrite)]
    @Test (true and false) or true implies (false xor true) => [true and false or true implies false xor true/]
  [/file]
  
[/template]