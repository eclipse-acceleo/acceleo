[comment encoding = UTF-8 /]
[module activator('http://www.eclipse.org/acceleo/4.0')/]

[import org::eclipse::acceleo::aql::ide::ui::module::services::Services/]

[**
 * Generate the Activator Java file.
 * @param projectUIName the UI project name
 */]
[template public activatorFile(projectUIName : String)]
  [file (projectUIName + '/src/' + projectUIName.replaceAll('\\.', '/') + '/Activator.java', overwrite, 'UTF-8')]
    [protected ('copyright') startTagPrefix('//') endTagPrefix('//')]
    [/protected]
    
    package [projectUIName/];

    [protected ('imports') startTagPrefix('//') endTagPrefix('//')]
    
      import org.eclipse.core.runtime.IStatus;
      import org.eclipse.core.runtime.Status;
      import org.eclipse.emf.common.EMFPlugin;
      import org.eclipse.emf.common.util.ResourceLocator;

    [/protected]
    
    /**
     * Plugin's activator class.
     * 
     * @author [''.getUserName()/]
     */
    public class Activator extends EMFPlugin {
    
    	/**
    	 * Plugin's id.
    	 */
    	public static final String PLUGIN_ID = "[projectUIName/]"; //$NON-NLS-1$
    
    	/**
    	 * The shared instance.
    	 */
    	public static final Activator INSTANCE = new Activator();
    
    	/**
    	 * The implementation plugin for Eclipse.
    	 */
    	private static Implementation plugin;
    
    	/**
    	 * The constructor.
    	 */
    	public Activator() {
    		super(new ResourceLocator['['/]] {});
    	}
    
    	@Override
    	public ResourceLocator getPluginResourceLocator() {
    		return plugin;
    	}
    
    	public static Implementation getPlugin() {
    		return plugin;
    	}
    
    	/**
    	 * Class implementing the EclipsePlugin instance, instanciated when the code is run in an OSGi context.
    	 * 
    	 * @author cedric
    	 */
    	public static class Implementation extends EclipsePlugin {
    
    		/**
    		 * Create the Eclipse Implementation.
    		 */
    		public Implementation() {
    			super();
    
    			// Remember the static instance.
    			//
    			plugin = this;
    		}
    
    	}
    
    	/**
    	 * Returns the shared instance.
    	 *
    	 * @return the shared instance.
    	 */
    	public static Activator getDefault() {
    		return INSTANCE;
    	}
    
    	/**
    	 * Logs the given exception as error or warning.
    	 * 
    	 * @param exception
    	 *            The exception to log.
    	 * @param blocker
    	 *            <code>True</code> if the message must be logged as error, <code>False</code> to log it as a
    	 *            warning.
    	 */
    	public static void log(Exception exception, boolean blocker) {
    		final int severity;
    		if (blocker) {
    			severity = IStatus.ERROR;
    		} else {
    			severity = IStatus.WARNING;
    		}
    		Activator.INSTANCE.log(new Status(severity, PLUGIN_ID, exception.getMessage(), exception));
    	}
    
    	/**
    	 * Puts the given message in the error log view, as error or warning.
    	 * 
    	 * @param message
    	 *            The message to put in the error log view.
    	 * @param blocker
    	 *            <code>True</code> if the message must be logged as error, <code>False</code> to log it as a
    	 *            warning.
    	 */
    	public static void log(String message, boolean blocker) {
    		int severity = IStatus.WARNING;
    		if (blocker) {
    			severity = IStatus.ERROR;
    		}
    		String errorMessage = message;
    		if (errorMessage == null || "".equals(errorMessage)) { //$NON-NLS-1$
    			errorMessage = "Logging null message should never happens."; //$NON-NLS-1$
    		}
    		Activator.INSTANCE.log(new Status(severity, PLUGIN_ID, errorMessage));
    	}
    
    }
  [/file]
[/template]