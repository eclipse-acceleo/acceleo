[comment encoding = UTF-8 /]
[module eclipseGeneratorHandler('http://www.eclipse.org/acceleo/4.0')/]

[import org::eclipse::acceleo::aql::ide::ui::module::requests::requests/]
[import org::eclipse::acceleo::aql::ide::ui::module::services::Services/]

[**
 * Generate the plugin.xml file.
 * @param projectUIName the UI project name
 */]
[template public generatorHandlerFile(module : acceleo::Module, projectUIName : String)]
  [file (projectUIName + '/src/' + projectUIName.replaceAll('\\.', '/') + '/handlers/' + module.getEclipseHandlerClassName() + '.java', overwrite, 'UTF-8')]
    [protected ('copyright') startTagPrefix('//') endTagPrefix('//')]
    [/protected]

    package [projectUIName/].handlers;

    [protected ('imports') startTagPrefix('//') endTagPrefix('//')]

      import java.lang.reflect.InvocationTargetException;
      import java.util.ArrayList;

      import java.util.Iterator;
      import java.util.List;

      import org.eclipse.core.commands.AbstractHandler;
      import org.eclipse.core.commands.ExecutionEvent;
      import org.eclipse.core.commands.ExecutionException;
      import org.eclipse.core.resources.IFile;
      import org.eclipse.core.runtime.IProgressMonitor;
      import org.eclipse.core.runtime.IStatus;
      import org.eclipse.core.runtime.Status;
      import org.eclipse.core.runtime.SubMonitor;
      import org.eclipse.emf.common.util.BasicMonitor;
      import org.eclipse.emf.common.util.Monitor;
      import [module.getReceiverQualifiedClassName()/];
      import org.eclipse.jface.operation.IRunnableWithProgress;
      import org.eclipse.jface.viewers.IStructuredSelection;
      import [projectUIName/].Activator;
      import [projectUIName/].[module.getEclipseClassName()/];
      import org.eclipse.ui.PlatformUI;
      import org.eclipse.ui.handlers.HandlerUtil;

    [/protected]

    /**
     * Command handler for [module.getQualifiedName()/].
     * 
     * @author [''.getUserName()/]
     * @generated
     */
    public class [module.getEclipseHandlerClassName()/] extends AbstractHandler {

    	/**
    	 * @generated
    	 */
    	@Override
    	public Object execute(ExecutionEvent event) throws ExecutionException {
    		final IStructuredSelection selection = HandlerUtil.getCurrentStructuredSelection(event);

    		final IRunnableWithProgress generateRunnable = new IRunnableWithProgress() {

    			@Override
    			public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
    				final Iterator<?> it = selection.iterator();
    				final List<Object> selectedList = new ArrayList<>();
    				while (it.hasNext()) {
    					selectedList.add(it.next());
    				}
    				final SubMonitor subMonitor = SubMonitor.convert(monitor, selectedList.size());
    				for (Object selected : selectedList) {
    					final Monitor childMonitor = BasicMonitor.toMonitor(subMonitor.split(1));
    					final [module.getEclipseClassName()/] generator;
    					try {
    						if (selected instanceof [module.getReceiverClassName()/]) {
    							generator = new [module.getEclipseClassName()/](([module.getReceiverClassName()/])selected);
    							generator.generate(childMonitor);
    						} else if (selected instanceof IFile) {
    							generator = new [module.getEclipseClassName()/]((IFile)selected);
    							generator.generate(childMonitor);
    						}
    					} finally {
    						childMonitor.done();
    					}
    					if (monitor.isCanceled()) {
    						break;
    					}
    				}
    			}
    		};

    		try {
    			PlatformUI.getWorkbench().getProgressService().run(true, true, generateRunnable);
    		} catch (InvocationTargetException e) {
    			Activator.getDefault().log(new Status(IStatus.ERROR, getClass(), "Couldn't generate.", e));
    		} catch (InterruptedException e) {
    			Activator.getDefault().log(new Status(IStatus.ERROR, getClass(), "Couldn't generate.", e));
    		}

    		return null;
    	}

    }
  [/file]
[/template]