################################################################################
# Copyright (c) 2008, 2023 Obeo.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v2.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v20.html
# 
# Contributors:
#     Obeo - initial API and implementation
################################################################################
## note : apostrophes need to be doubled in these messages or they'll be ignored

# org.eclipse.acceleo.aql.ide.ui.wizard
AcceleoModuleComposite.ModuleContainer = Parent Folder
AcceleoModuleComposite.Browse = Browse...
AcceleoModuleComposite.Select = Select...
AcceleoModuleComposite.ModuleContainerHelp = The parent folder is the folder that will contain your Acceleo module. You should use a Java source folder and for your generators that contains a "main" template, the source folder in question should be exported in the MANIFEST.MF file.
AcceleoModuleComposite.ModuleName = Module Name
AcceleoModuleComposite.ModuleNameHelp = The name of an Acceleo module should describe the goal of your Acceleo module. It is recommended to use a name that starts with a lower case character and use camel case just like Java methods.
AcceleoModuleComposite.MetamodelURIs = Metamodel URIs
AcceleoModuleComposite.MetamodelURIsHelp = The metamodel is the container of the primary concept that will be manipulated in your generator (with UML for example, you can manipulate Classes and Attributes for your generation). You can use multiple metamodel in an Acceleo module, but be careful with concept that share the same name in several metamodel. You would need to prefix them by their package name to prevent any problems (ie: uml::Class).
AcceleoModuleComposite.ContainerSelection = Select a new file container
AcceleoModuleComposite.ModuleElementNameTemplate = Template Name
AcceleoModuleComposite.ModuleElementNameQuery = Query Name
AcceleoModuleComposite.ModuleElementNameHelp = The name of your module element (template or query) should start with a lower case name and use camel case just like a Java method.
AcceleoModuleComposite.ModuleElementType = Type
AcceleoModuleComposite.Type = Select the type of the first parameter of the module element.
AcceleoModuleComposite.ModuleElementTypeHelp = This type will be used as the type of the variable of your template or query.
AcceleoModuleComposite.ModuleElementKindTemplate = Template
AcceleoModuleComposite.ModuleElementKindQuery = Query
AcceleoModuleComposite.ModuleElementKindHelp = You can initialize your module with a template or a query, please see the documentation for more information on those elements.
AcceleoModuleComposite.ModuleGenerateDocumentation = Generate documentation
AcceleoModuleComposite.ModuleGenerateDocumentationHelp = If you check this box Acceleo will generate the basic documentation of your module. 
AcceleoModuleComposite.TemplateGenerateFile = Generate file
AcceleoModuleComposite.TemplateGenerateFileHelp = If you check this box, your template will contain a [file] block and it will generate a file. You can add the file block to generate a file manually to any template later. If you are using a template to generate a file, it is recommended to have this template in a package named "files".
AcceleoModuleComposite.TemplateMain = Main template
AcceleoModuleComposite.TemplateMainHelp = Checking this box will transform the template into a main template (ie: an entry point of the generation). The main template will be associated with a Java class with the same name created next to the module containing the template. You can use this class to launch programmaticaly the generation.
AcceleoModuleComposite.ModuleElementInitializeContent = Initialize Contents
AcceleoModuleComposite.ModuleElementInitializeContentHelp = The initialization options allow you to initialize the content of your template or your query with a specific strategy
AcceleoModuleComposite.ModuleElementInitializeContentKindHelp = Select the initialization strategy
AcceleoModuleComposite.ModuleElementInitializeFile = File
AcceleoModuleComposite.ModuleElementInitializeFileHelp = Select the file that will be considered for the initialization of the template or query
AcceleoModuleComposite.ModuleElementExample = Select an example
AcceleoModuleComposite.AddButton = Add metamodels to the module definition
AcceleoModuleComposite.RemoveButton = Remove metamodels from the module definition

# Errors and warnings
AcceleoModuleCompositeMessage.InvalidName = The name of the module cannot be empty.
AcceleoModuleCompositeMessage.InvalidParentFolder = The path of the parent folder of the module cannot be empty.
AcceleoModuleCompositeMessage.EmptyMetamodelURIs = The list of metamodel URIs used by the module is empty.
AcceleoModuleCompositeMessage.InvalidModuleElementName = The name of the module element cannot be empty.
AcceleoModuleCompositeMessage.InvalidModuleElementParameterType = The type of the parameter of the module element cannot be empty.
AcceleoModuleCompositeMessage.InvalidModuleElementInitializationKind = The kind of initialization strategy cannot be empty if the initialization of the content has been selected.
AcceleoModuleCompositeMessage.EmptyModuleElementInitializationPath = The path of initialization file cannot be empty if the initialization of the content has been selected.
AcceleoModuleCompositeMessage.InvalidModuleElementInitializationPath = The path of initialization file is invalid.
AcceleoModuleCompositeMessage.FileAlreadyExists = The module already exists.
