[module emfServices('http://www.eclipse.org/emf/2002/Ecore')/]

[comment @main/]
[template public test(p : ecore::EPackage)]
  [let c : ecore::EClass = p.getEClassifier('ClasseB').oclAsType(ecore::EClass)]
    [let attr : ecore::EAttribute = c.eClass().getEStructuralFeature('name')]
      [let ref : ecore::EReference = c.eClass().getEStructuralFeature('eSuperTypes')]
        [file ('testEObject', overwrite)]
          @Test 'test'.oclAsType(String) => ['test'.oclAsType(String)/]
          @Test c.oclIsUndefined() => [c = null/]
          @Test c.oclIsTypeOf(EClass) => [c.oclIsTypeOf(ecore::EClass)/]
          @Test c.oclIsTypeOf(EPackage) => [c.oclIsTypeOf(ecore::EPackage)/]
          @Test c.oclIsKindOf(EClass) => [c.oclIsKindOf(ecore::EClass)/]
          @Test c.oclIsKindOf(EPackage) => [c.oclIsKindOf(ecore::EPackage)/]
          @Test c.oclAsType(EClass).name => [c.oclAsType(ecore::EClass).name/]
          @Test c.toString().startsWith('org.eclipse.emf.ecore.impl.EClassImpl@') => [c.toString().startsWith('org.eclipse.emf.ecore.impl.EClassImpl@')/]
          @Test c.siblings(EClass)->collect(name) => [c.siblings(ecore::EClass)->collect(temp1 | temp1.name)/]
          @Test c.precedingSiblings(EClass)->collect(name) => [c.precedingSiblings(ecore::EClass)->collect(temp2 | temp2.name)/]
          @Test c.precedingSiblings()->collect(name) => [c.precedingSiblings()->collect(temp3 | p.name)/]
          @Test c.followingSiblings(EClass)->collect(name) => [c.followingSiblings(ecore::EClass)->collect(temp4 | temp4.name)/]
          @Test c.followingSiblings()->collect(name) => [c.followingSiblings()->collect(temp5 | p.name)/]
          @Test c.eResource().toString().startsWith('org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl@') => [c.eResource().toString().startsWith('org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl@')/]
          @Test c.eGet('name') => [c.eGet('name')/]
          @Test c.eContainmentFeature().name => [c.eContainmentFeature().name/]
          @Test c.eContainingFeature().name => [c.eContainingFeature().name/]
          @Test c.eContainer().oclIsTypeOf(EPackage) => [c.eContainer().oclIsTypeOf(ecore::EPackage)/]
          @Test c.eContainer(EPackage).name => [c.eContainer(ecore::EPackage).name/]
          @Test c.eClass().name => [c.eClass().name/]
          @Test c.ancestors(EPackage)->collect(name) => [c.ancestors(ecore::EPackage)->collect(temp6 | temp6.name)/]
          @Test c.ancestors()->collect(name) => [c.ancestors()->collect(temp7 | p.name)/]
          @Test c.eAllContents(EAttribute)->collect(name) => [c.eAllContents(ecore::EAttribute)->collect(temp8 | temp8.name)/]
          @Test c <> c.eContainer() => [c <> c.eContainer()/]
          @Test c <> c => [c <> c/]
          @Test c = c.eContainer() => [c = c.eContainer()/]
          @Test c = c => [c = c/]
          @Test c.eAllContents()->collect(name) => [c.eAllContents()->collect(temp9 | p.name)/]
          @Test c.siblings()->collect(name) => [c.siblings()->collect(temp10 | p.name)/]
          @Test c.eContents()->collect(name) => [c.eContents()->collect(temp11 | p.name)/]
          @Test c.eCrossReferences()->collect(name) => [c.eCrossReferences()->collect(temp12 | p.name)/]
        [/file]
      [/let]
    [/let]
  [/let]
[/template]