= Acceleo
Acceleo 4 User Guide

:source-highlighter: highlightjs
:listing-caption: Listing
:toc:
:toclevels: 3
:sectnums:
:icons: image

== Introduction ==

Acceleo 4 is a a text generator based on templates. It can be used to generate any kind of text file: code, configuration, documentation, ... The template consists of imperative statements like conditionals, loops, and navigation expression used to retrieve data from models. When generating the engine use templates  statements and also replace navigation expressions by their values in order to produce the output text. 

== Generating ==

This section describe how to launch a generation from <<eclipse>> or <<_maventycho>>. Note you can also use the <<_debugger>> to run a module or directly use Acceleo 4 programmatically, see <<_generation>>.

=== Eclipse ===

TODO

=== Maven/Tycho ===

TODO

== Module authoring ==

This section cover tools for template writing, debugging and testing. You can read to the link:language.html[language documentation] to understand Acceleo 4 language specificity. If you are looking for the syntax quick reference you can check the link:syntax.html[syntax page].

=== White spaces ===

When generating text, and especially code, white spaces and indentation is an important point. In order to keep template code indentation from interfering with the generated output, a few rules applies:

- each block has a mandatory indentation of two characters than will not be generated in the output (in yellow below)
- when generating a block if the last generated line is not empty, it is repeated at the beginning of each line generated by the block (in red below)

image::images/Indentation.png[Indentation] 

=== Editor ===

TODO

=== Debugger ===

TODO

=== Unit test module ===

You can unit test your modules using the same JUnit test suite we are using for the development of Acceleo 4. You will simply need to create a class extending the class org.eclipse.acceleo.tests.utils.AbstractEvaluationTestSuite and create a folder with you test folders. Those folders need to respect a naming convention. You can find a working example with the class https://git.eclipse.org/c/acceleo/org.eclipse.acceleo.git/tree/acceleo-aql/org.eclipse.acceleo.aql.tests/src/org/eclipse/acceleo/tests/evaluation/FileStatementTests.java?h=acceleo-aql[FileStatementTests] and the corresponding https://git.eclipse.org/c/acceleo/org.eclipse.acceleo.git/tree/acceleo-aql/org.eclipse.acceleo.aql.tests/resources/evaluation/fileStatement?h=acceleo-aql[folder].

== Using Acceleo 4 programmatically ==

Acceleo 4 can be used programmatically and for instance integrated in other products. 

=== Parsing ===

[source,java]
---------
URI destination = URI.createURI(...);
environment = new AcceleoEnvironment(new DefaultGenerationStrategy(), destination);
IQualifiedNameResolver moduleResolver = new ClassLoaderQualifiedNameResolver(getClass().getClassLoader(), environment.getQueryEnvironment());
environment.setModuleResolver(moduleResolver);
Module module = environment.getModule(qualifiedName);
---------


=== Validation ===

[source,java]
----
AcceleoValidator validator = new AcceleoValidator(environment);
List<IValidationMessage> messages = validator.validate(astResult, qualifiedName).getValidationMessages();
----

=== Completion ===

[source,java]
----
AcceleoCompletor completor = new AcceleoCompletor();
String source = ...;
List<ICompletionProposal> proposals = completor.getProposals(environment, source, position);
----

=== Generation ===

[source,java]
----
AcceleoEvaluator evaluator = new AcceleoEvaluator(environment);
ResourceSetImpl rs = new ResourceSetImpl();
Resource model = rs.getResource(..., true);
AcceleoUtil.generate(evaluator, environment, module, model);
----
