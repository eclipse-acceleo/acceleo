/*******************************************************************************
 * Copyright (c) 2016, 2017  Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************/
package org.eclipse.acceleo.aql.evaluation;

import java.util.ArrayDeque;
import java.util.Collections;
import java.util.Deque;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.acceleo.Binding;
import org.eclipse.acceleo.Block;
import org.eclipse.acceleo.Comment;
import org.eclipse.acceleo.Expression;
import org.eclipse.acceleo.ExpressionStatement;
import org.eclipse.acceleo.LetStatement;
import org.eclipse.acceleo.Module;
import org.eclipse.acceleo.ModuleElement;
import org.eclipse.acceleo.Query;
import org.eclipse.acceleo.Statement;
import org.eclipse.acceleo.Template;
import org.eclipse.acceleo.TextStatement;
import org.eclipse.acceleo.aql.AcceleoEnvironment;
import org.eclipse.acceleo.query.runtime.IQueryBuilderEngine.AstResult;
import org.eclipse.acceleo.query.runtime.IQueryEnvironment;
import org.eclipse.acceleo.query.runtime.IQueryEvaluationEngine;
import org.eclipse.acceleo.query.runtime.QueryEvaluation;
import org.eclipse.acceleo.util.AcceleoSwitch;
import org.eclipse.emf.common.util.Diagnostic;

/**
 * This implementation of a switch dedicated to Acceleo elements will be used to evaluate their results as we
 * visit them.
 * 
 * @author <a href="mailto:laurent.goubet@obeo.fr">Laurent Goubet</a>
 */
public class AcceleoEvaluator extends AcceleoSwitch<Object> {
	/** The current evaluation environment. */
	private AcceleoEnvironment environment;

	/**
	 * The {@link IQueryEvaluationEngine} used to evaluate AQL expressions.
	 */
	private final IQueryEvaluationEngine aqlEngine;

	/**
	 * The variables stack.
	 */
	private final Deque<Map<String, Object>> variablesStack;

	/**
	 * Instantiates an evaluation switch given the acceleo environment to consider.
	 * 
	 * @param environment
	 *            The current evaluation environment.
	 */
	public AcceleoEvaluator(AcceleoEnvironment environment) {
		this.environment = environment;
		final IQueryEnvironment env = environment.getQueryEnvironment();
		this.aqlEngine = QueryEvaluation.newEngine(env);
		this.variablesStack = new ArrayDeque<>();
		variablesStack.addLast(Collections.<String, Object> emptyMap());
	}

	/**
	 * Pushes the given variables into the stack.
	 * 
	 * @param variables
	 *            the variables to push
	 */
	public void pushVariables(Map<String, Object> variables) {
		variablesStack.addLast(variables);
	}

	/**
	 * Peeks the last {@link #pushVariables(Map) pushed} variables from the stack.
	 * 
	 * @return the last {@link #pushVariables(Map) pushed} variables from the stack
	 */
	public Map<String, Object> peekVariables() {
		return variablesStack.peekLast();
	}

	/**
	 * Pops the last {@link #pushVariables(Map) pushed} variables from the stack.
	 * 
	 * @return the last {@link #pushVariables(Map) pushed} variables from the stack
	 */
	public Map<String, Object> popVariables() {
		return variablesStack.removeLast();
	}

	/**
	 * {@inheritDoc}
	 *
	 * @see org.eclipse.acceleo.util.AcceleoSwitch#caseExpression(org.eclipse.acceleo.Expression)
	 */
	@Override
	public Object caseExpression(Expression expression) {
		AstResult ast = expression.getAst();
		if (ast.getDiagnostic().getSeverity() == Diagnostic.ERROR) {
			// FIXME throw / log
		}

		return aqlEngine.eval(ast, variablesStack.peekLast()).getResult();
	}

	/**
	 * {@inheritDoc}
	 *
	 * @see org.eclipse.acceleo.util.AcceleoSwitch#caseExpressionStatement(org.eclipse.acceleo.ExpressionStatement)
	 */
	@Override
	public Object caseExpressionStatement(ExpressionStatement object) {
		return doSwitch(object.getExpression());
	}

	/**
	 * {@inheritDoc}
	 *
	 * @see org.eclipse.acceleo.util.AcceleoSwitch#caseModule(org.eclipse.acceleo.Module)
	 */
	@Override
	public Object caseModule(Module module) {
		StringBuilder builder = new StringBuilder();
		for (ModuleElement element : module.getModuleElements()) {
			if (element instanceof Template && ((Template)element).isMain()) {
				builder.append(doSwitch(element));
			}
		}
		// FIXME return the text generated by the templates? the list of generated files?
		return builder.toString();
	}

	/**
	 * {@inheritDoc}
	 *
	 * @see org.eclipse.acceleo.util.AcceleoSwitch#caseTemplate(org.eclipse.acceleo.Template)
	 */
	@Override
	public Object caseTemplate(Template template) {
		final Object res;

		try {
			res = doSwitch(template.getBody());
		} finally {
			environment.popStack(template);
		}

		return res;
	}

	@Override
	public Object caseQuery(Query query) {
		final Object res;

		try {
			res = doSwitch(query.getBody());
		} finally {
			environment.popStack(query);
		}

		return res;
	}

	/**
	 * {@inheritDoc}
	 *
	 * @see org.eclipse.acceleo.util.AcceleoSwitch#caseTextStatement(org.eclipse.acceleo.TextStatement)
	 */
	@Override
	public Object caseTextStatement(TextStatement text) {
		return text.getValue();
	}

	@Override
	public Object caseBlock(Block block) {
		final StringBuilder builder = new StringBuilder();

		for (Statement stmt : block.getStatements()) {
			builder.append(doSwitch(stmt));
		}

		return builder.toString();
	}

	@Override
	public Object caseComment(Comment comment) {
		return "";
	}

	@Override
	public Object caseLetStatement(LetStatement let) {
		final Object res;

		final Map<String, Object> variables = new HashMap<String, Object>(peekVariables());
		for (Binding binding : let.getVariables()) {
			final String name = binding.getName();
			final Object value = doSwitch(binding.getInitExpression());
			variables.put(name, value);
		}

		pushVariables(variables);
		try {
			res = doSwitch(let.getBody());
		} finally {
			popVariables();
		}

		return res;
	}

}
