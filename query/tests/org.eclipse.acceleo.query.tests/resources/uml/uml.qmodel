<?xml version="1.0" encoding="UTF-8"?>
<qmodel:Queries xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:qmodel="http://www.eclipse.org/acceleo/qmodel" name="uml">
  <queries expression="[''/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value=""/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="['// TODO body of '+instance.name/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="// TODO body of model"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="instance" value="//@modelElements.1"/>
  </queries>
  <queries expression="['&lt;&lt;'+self.name+'>>'/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="&lt;&lt;model>>"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="['&lt;&lt;use>> '+self.name/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="&lt;&lt;use>> model"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="['Open '+self.name+' Activity Diagram'/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="Open model Activity Diagram"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="['Open '+self.name+' Class Diagram'/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="Open model Class Diagram"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="['Open '+self.name+' Sequence Diagram'/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="Open model Sequence Diagram"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="['Open '+self.name+' State Machine Diagram'/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="Open model State Machine Diagram"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="['Part'+self.eContainer().eContents()->filter(uml::Property)->size()/]" startingPoint="//@modelElements.2">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="Part5"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="['Transition_'+source.name+'To'+target.name/]" startingPoint="//@modelElements.2">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="Transition_modelToname"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="source" value="//@modelElements.1"/>
    <variables xsi:type="qmodel:EObjectVariable" name="target" value="//@modelElements.2"/>
  </queries>
  <queries expression="['context dependency: '+self.clientDependency.supplier.name->sep('::')/]" startingPoint="//@modelElements.2">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="context dependency: "/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="['current container : '+self.clientDependency.supplier.eContainer(uml::NamedElement).name/]" startingPoint="//@modelElements.2">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="current container : "/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="['current container : '+self.represents.eContainer().oclAsType(uml::NamedElement).name+'\n context dependency: '+self.clientDependency.supplier.name->sep('::')/]" startingPoint="//@modelElements.3">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="current container : Person&#xA; context dependency: "/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="['current container : '+self.represents.eContainer().oclAsType(uml::NamedElement).name/]" startingPoint="//@modelElements.3">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="current container : Person"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="['do/ '+ self.computeUmlLabel()/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="do/ model"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
  </queries>
  <queries expression="['entry/ '+ self.computeUmlLabel()/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="entry/ model"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
  </queries>
  <queries expression="['exit/ '+ self.computeUmlLabel()/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="exit/ model"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
  </queries>
  <queries expression="[(self.eClass().name &lt;> 'Class') and (self.eContainer() &lt;> container) /]" startingPoint="//@modelElements.3">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="container" value="//@modelElements.1"/>
  </queries>
  <queries expression="[(not self.oclIsTypeOf(uml::Class)) and (self.eContainer() &lt;> container) /]" startingPoint="//@modelElements.3">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=ActivityPartition) is type of EClassifierLiteral=Class" startPosition="5" endPosition="33"/>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="container" value="//@modelElements.1"/>
  </queries>
  <queries expression="[(self.eClass().name = 'Class') and (self.eContainer() &lt;> container) /]" startingPoint="//@modelElements.3">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="container" value="//@modelElements.1"/>
  </queries>
  <queries expression="[(self.eClass().name = 'Class') and (self.eContainer() = container) /]" startingPoint="//@modelElements.3">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="container" value="//@modelElements.1"/>
  </queries>
  <queries expression="[(self.oclIsTypeOf(uml::Class)) and (self.eContainer() &lt;> container) /]" startingPoint="//@modelElements.3">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=ActivityPartition) is type of EClassifierLiteral=Class" startPosition="1" endPosition="29"/>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="container" value="//@modelElements.1"/>
  </queries>
  <queries expression="[(self.oclIsTypeOf(uml::Class)) and (self.eContainer() = container) /]" startingPoint="//@modelElements.3">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=ActivityPartition) is type of EClassifierLiteral=Class" startPosition="1" endPosition="29"/>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="container" value="//@modelElements.1"/>
  </queries>
  <queries expression="[(source.oclIsTypeOf(uml::Property) and sourceView.eContainer()=targetView.eContainer()) or (source.oclIsKindOf(uml::StructuredClassifier) and sourceView.eContainer()=targetView.eContainer()) or (source.oclIsKindOf(uml::Port) and sourceView.eContainer().eContainer()=targetView.eContainer())/]" startingPoint="//@modelElements.3">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when source (EClassifier=ActivityPartition) is type of EClassifierLiteral=Property" startPosition="1" endPosition="34"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when source (EClassifier=ActivityPartition) is kind of EClassifierLiteral=StructuredClassifier" startPosition="92" endPosition="137"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when source (EClassifier=ActivityPartition) is kind of EClassifierLiteral=Port" startPosition="195" endPosition="224"/>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="source" value="//@modelElements.3"/>
    <variables xsi:type="qmodel:EObjectVariable" name="sourceView" value="//@modelElements.2"/>
    <variables xsi:type="qmodel:EObjectVariable" name="targetView" value="//@modelElements.3"/>
  </queries>
  <queries expression="[(target.oclIsTypeOf(uml::Property) and sourceView.eContainer()=targetView.eContainer()) or (target.oclIsKindOf(uml::StructuredClassifier) and sourceView.eContainer()=targetView.eContainer()) or (target.oclIsKindOf(uml::Port) and sourceView.eContainer()=targetView.eContainer().eContainer())/]" startingPoint="//@modelElements.3">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when target (EClassifier=ActivityPartition) is type of EClassifierLiteral=Property" startPosition="1" endPosition="34"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when target (EClassifier=ActivityPartition) is kind of EClassifierLiteral=StructuredClassifier" startPosition="92" endPosition="137"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when target (EClassifier=ActivityPartition) is kind of EClassifierLiteral=Port" startPosition="195" endPosition="224"/>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="target" value="//@modelElements.3"/>
    <variables xsi:type="qmodel:EObjectVariable" name="sourceView" value="//@modelElements.2"/>
    <variables xsi:type="qmodel:EObjectVariable" name="targetView" value="//@modelElements.3"/>
  </queries>
  <queries expression="[0&lt;>null/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[0=null/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[uml::Class/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EObjectResult" interpreter="mtl">
        <value href="http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifierLiteral=Class</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[aProperty.findTypeByName('String')&lt;>null/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
    <variables xsi:type="qmodel:EObjectVariable" name="aProperty" value="//@modelElements.2"/>
    <pluginsInClassPath>org.eclipse.acceleo.query.tests</pluginsInClassPath>
  </queries>
  <queries expression="[actor.name/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="Vehicle"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=String</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="actor" value="//@modelElements.4"/>
  </queries>
  <queries expression="[self.ancestors()->last()->including(self.ancestors()->last().eAllContents(uml::PackageableElement))/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:SetResult" interpreter="manual">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_w8FzIJBjEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:ListResult">
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_Tj-XsJBlEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_GUaJoJBmEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_Bob28JFcEd2gfL_kAZmBgw"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_BCAJEJFcEd2gfL_kAZmBgw"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_pC1TsJBqEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_pC1TspBqEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_pC16wJBqEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_pC16wpBqEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_pC16w5BqEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_A96esJBpEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_A96espBpEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_A97FwJBpEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_A97FwpBpEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_A97Fw5BpEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_gG4FUJBqEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_k9nKwJBqEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_queWIJBqEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_kmJGIJCPEd2Xeb6Jt2sbCQ"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_rRaEEJBqEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_sSj_EJBqEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_lEMUEJCPEd2Xeb6Jt2sbCQ"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_3iZnsHDDEeSjq5wVpgsUQA"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_hPZ4sHcDEeS_LcjX3XW_Qg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_G1LiIJBrEd2MY5zfT4Awfg"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_bFkDkJCWEd2Xeb6Jt2sbCQ"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_cHO78JCWEd2Xeb6Jt2sbCQ"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_q-uUoJCWEd2Xeb6Jt2sbCQ"/>
          </values>
          <values xsi:type="qmodel:EObjectResult">
            <value href="example.uml#_eRVrwHDGEeSjq5wVpgsUQA"/>
          </values>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Set(EClassifier=TemplateParameter)</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=PackageableElement))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=UseCase))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=Substitution))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=InterfaceRealization))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=Behavior))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=Classifier))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=Node))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=ComponentRealization))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=Manifestation))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=Artifact))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=EnumerationLiteral))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=ProtocolStateMachine))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=ValueSpecification))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=StringExpression))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=DeploymentSpecification))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=OpaqueExpression))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=TimeExpression))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=Dependency))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=Constraint))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=InteractionConstraint))</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=Deployment))</possibleTypes>
        <possibleTypes>Set(EClassifier=TemplateParameterSubstitution)</possibleTypes>
        <possibleTypes>Set(EClassifier=Package)</possibleTypes>
        <possibleTypes>Set(EClassifier=Component)</possibleTypes>
        <possibleTypes>Set(EClassifier=EAnnotation)</possibleTypes>
        <possibleTypes>Set(EClassifier=TemplateSignature)</possibleTypes>
        <possibleTypes>Set(EClassifier=TemplateBinding)</possibleTypes>
        <possibleTypes>Set(EClassifier=Class)</possibleTypes>
        <possibleTypes>Set(EClassifier=Interface)</possibleTypes>
        <possibleTypes>Set(EClassifier=EModelElement)</possibleTypes>
        <possibleTypes>Set(EClassifier=TemplateableElement)</possibleTypes>
        <possibleTypes>Set(EClassifier=BehavioredClassifier)</possibleTypes>
        <possibleTypes>Set(EClassifier=State)</possibleTypes>
        <possibleTypes>Set(EClassifier=Transition)</possibleTypes>
        <possibleTypes>Set(EClassifier=Node)</possibleTypes>
        <possibleTypes>Set(EClassifier=EPackage)</possibleTypes>
        <possibleTypes>Set(EClassifier=EEnum)</possibleTypes>
        <possibleTypes>Set(EClassifier=EClass)</possibleTypes>
        <possibleTypes>Set(EClassifier=EOperation)</possibleTypes>
        <possibleTypes>Set(EClassifier=EClassifier)</possibleTypes>
        <possibleTypes>Set(EClassifier=Classifier)</possibleTypes>
        <possibleTypes>Set(EClassifier=Artifact)</possibleTypes>
        <possibleTypes>Set(EClassifier=Deployment)</possibleTypes>
        <possibleTypes>Set(EClassifier=DataType)</possibleTypes>
        <possibleTypes>Set(EClassifier=StateMachine)</possibleTypes>
        <possibleTypes>Set(EClassifier=Region)</possibleTypes>
        <possibleTypes>Set(EClassifier=Activity)</possibleTypes>
        <possibleTypes>Set(EClassifier=CombinedFragment)</possibleTypes>
        <possibleTypes>Set(EClassifier=Property)</possibleTypes>
        <possibleTypes>Set(EClassifier=MultiplicityElement)</possibleTypes>
        <possibleTypes>Set(EClassifier=Parameter)</possibleTypes>
        <possibleTypes>Set(EClassifier=Constraint)</possibleTypes>
        <possibleTypes>Set(EClassifier=InstanceSpecification)</possibleTypes>
        <possibleTypes>Set(EClassifier=Slot)</possibleTypes>
        <possibleTypes>Set(EClassifier=Expression)</possibleTypes>
        <possibleTypes>Set(EClassifier=ActivityEdge)</possibleTypes>
        <possibleTypes>Set(EClassifier=ObjectNode)</possibleTypes>
        <possibleTypes>Set(EClassifier=ValueSpecificationAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ValuePin)</possibleTypes>
        <possibleTypes>Set(EClassifier=JoinNode)</possibleTypes>
        <possibleTypes>Set(EClassifier=ChangeEvent)</possibleTypes>
        <possibleTypes>Set(EClassifier=TimeExpression)</possibleTypes>
        <possibleTypes>Set(EClassifier=Message)</possibleTypes>
        <possibleTypes>Set(EClassifier=Lifeline)</possibleTypes>
        <possibleTypes>Set(EClassifier=InteractionUse)</possibleTypes>
        <possibleTypes>Set(EClassifier=InteractionConstraint)</possibleTypes>
        <possibleTypes>Set(EClassifier=Duration)</possibleTypes>
        <possibleTypes>Set(EClassifier=Abstraction)</possibleTypes>
        <possibleTypes>Set(EClassifier=NamedElement)</possibleTypes>
        <possibleTypes>Set(EClassifier=StringExpression)</possibleTypes>
        <possibleTypes>Set(EClassifier=TimeEvent)</possibleTypes>
        <possibleTypes>Set(EClassifier=CollaborationUse)</possibleTypes>
        <possibleTypes>Set(EClassifier=DeploymentTarget)</possibleTypes>
        <possibleTypes>Set(EClassifier=Namespace)</possibleTypes>
        <possibleTypes>Set(EClassifier=ParameterSet)</possibleTypes>
        <possibleTypes>Set(EClassifier=Extend)</possibleTypes>
        <possibleTypes>Set(EClassifier=Action)</possibleTypes>
        <possibleTypes>Set(EClassifier=StateInvariant)</possibleTypes>
        <possibleTypes>Set(EClassifier=InteractionOperand)</possibleTypes>
        <possibleTypes>Set(EClassifier=Enumeration)</possibleTypes>
        <possibleTypes>Set(EClassifier=Association)</possibleTypes>
        <possibleTypes>Set(EClassifier=Signal)</possibleTypes>
        <possibleTypes>Set(EClassifier=StructuredClassifier)</possibleTypes>
        <possibleTypes>Set(EClassifier=Behavior)</possibleTypes>
        <possibleTypes>Set(EClassifier=BehavioralFeature)</possibleTypes>
        <possibleTypes>Set(EClassifier=StructuredActivityNode)</possibleTypes>
        <possibleTypes>Set(EClassifier=LinkAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=WriteStructuralFeatureAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=StructuralFeatureAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=WriteVariableAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=AddStructuralFeatureValueAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=AddVariableValueAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=InvocationAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=CallOperationAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ClearAssociationAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=DestroyObjectAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=LoopNode)</possibleTypes>
        <possibleTypes>Set(EClassifier=OpaqueAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=RaiseExceptionAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ReadIsClassifiedObjectAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ReadLinkObjectEndAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ReadLinkObjectEndQualifierAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ReclassifyObjectAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ReduceAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=RemoveStructuralFeatureValueAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=RemoveVariableValueAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ReplyAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=SendObjectAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=SendSignalAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=StartClassifierBehaviorAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=StartObjectBehaviorAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=TestIdentityAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=UnmarshallAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=AcceptCallAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=AcceptEventAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=CallAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ClearStructuralFeatureAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ConditionalNode)</possibleTypes>
        <possibleTypes>Set(EClassifier=CreateLinkObjectAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=CreateObjectAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ReadExtentAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ReadLinkAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ReadSelfAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ReadStructuralFeatureAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ReadVariableAction)</possibleTypes>
        <possibleTypes>Set(EClassifier=UseCase)</possibleTypes>
        <possibleTypes>Set(EClassifier=SequenceNode)</possibleTypes>
        <possibleTypes>Set(EClassifier=ActionInputPin)</possibleTypes>
        <possibleTypes>Set(EClassifier=Interaction)</possibleTypes>
        <possibleTypes>Set(EClassifier=ActivityPartition)</possibleTypes>
        <possibleTypes>Set(EClassifier=InteractionFragment)</possibleTypes>
        <possibleTypes>Set(EClassifier=Element)</possibleTypes>
        <possibleTypes>Set(EClassifier=Stereotype)</possibleTypes>
        <possibleTypes>Set(EClassifier=ProtocolStateMachine)</possibleTypes>
        <possibleTypes>Set(EClassifier=Connector)</possibleTypes>
        <possibleTypes>Set(EClassifier=ExecutableNode)</possibleTypes>
        <possibleTypes>Set(EClassifier=LinkEndData)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.ancestors()->size()/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:IntegerResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Integer</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.class.name/]" startingPoint="//@modelElements.2">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="Person"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.clientDependency->size() > 0/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.clientDependency->size()>0 or self.represents.eContainer()->size()>0/]" startingPoint="//@modelElements.3">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[container &lt;> self.eContainer()/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="container" value="//@modelElements.4"/>
  </queries>
  <queries expression="[container->filter(uml::Activity)->size()>0/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="container" value="//@modelElements.4"/>
  </queries>
  <queries expression="[container->filter(uml::ActivityPartition)->size()>0/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="container" value="//@modelElements.4"/>
  </queries>
  <queries expression="[container.eContainer(uml::Package).getAvailableTypes()/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:SetResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_GUaJoJBmEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_gG4FUJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_k9nKwJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_queWIJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_rRaEEJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_sSj_EJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_3iZnsHDDEeSjq5wVpgsUQA"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Set(org.eclipse.uml2.uml.Type)</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
    <variables xsi:type="qmodel:EObjectVariable" name="container" value="//@modelElements.4"/>
    <pluginsInClassPath>org.eclipse.acceleo.query.tests</pluginsInClassPath>
  </queries>
  <queries expression="[container.eContainer(uml::Package)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EObjectResult" interpreter="mtl">
        <value href="example.uml#_Tj-XsJBlEd2MY5zfT4Awfg"/>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Package</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="container" value="//@modelElements.4"/>
  </queries>
  <queries expression="[container.oclAsType(uml::Element).getNearestPackage().getAllAppliedProfiles()/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Profile)</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
    <variables xsi:type="qmodel:EObjectVariable" name="container" value="//@modelElements.4"/>
  </queries>
  <queries expression="[container.oclIsKindOf(uml::Property) or container.oclIsKindOf(uml::StructuredClassifier)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always true:&#xA;Nothing inferred when container (EClassifier=Class) is not kind of EClassifierLiteral=StructuredClassifier" startPosition="40" endPosition="88"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when container (EClassifier=Class) is kind of EClassifierLiteral=Property" endPosition="36"/>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="container" value="//@modelElements.4"/>
  </queries>
  <queries expression="[container.packagedElement/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_GUaJoJBmEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_pC1TsJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_A96esJBpEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_gG4FUJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_k9nKwJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_queWIJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_rRaEEJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_sSj_EJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_3iZnsHDDEeSjq5wVpgsUQA"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_hPZ4sHcDEeS_LcjX3XW_Qg"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=PackageableElement)</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="container" value="//@modelElements.5"/>
  </queries>
  <queries expression="[self.oclAsType(uml::Model).name/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="model"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.packagedElement->excludes(class)/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="class" value="//@modelElements.4"/>
  </queries>
  <queries expression="[self.interfaceRealization->filter(uml::InterfaceRealization)/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="manual"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=InterfaceRealization)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.interfaceRealization->filter(uml::InterfaceRealization)/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="manual"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=InterfaceRealization)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.packagedElement->select(e | e.oclIsTypeOf(uml::Class) or e.oclIsTypeOf(uml::Interface))/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="manual">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_GUaJoJBmEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_gG4FUJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_k9nKwJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_queWIJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_rRaEEJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_sSj_EJBqEd2MY5zfT4Awfg"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Class)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=Interface)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.getAppliedStereotypes()->size() >0/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.getStereotypesDescription('energy')/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value=""/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
    <pluginsInClassPath>org.eclipse.acceleo.query.tests</pluginsInClassPath>
  </queries>
  <queries expression="[self.eAllContents(uml::Package)->including(self)/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_Tj-XsJBlEd2MY5zfT4Awfg"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Package)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.eContainer() = null/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.eContainer().eContainer().eAllContents(uml::EnumerationLiteral)->size() - 1/]" startingPoint="//@modelElements.2">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:IntegerResult" interpreter="mtl" value="-1"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Integer</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.eContainer(uml::BehavioredClassifier).eContents()->filter(uml::StateMachine)->last()/]" startingPoint="//@modelElements.2">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EmptyResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=StateMachine</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.eContainer(uml::BehavioredClassifier)/]" startingPoint="//@modelElements.2">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EObjectResult" interpreter="mtl">
        <value href="example.uml#_GUaJoJBmEd2MY5zfT4Awfg"/>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Component</possibleTypes>
        <possibleTypes>EClassifier=Class</possibleTypes>
        <possibleTypes>EClassifier=BehavioredClassifier</possibleTypes>
        <possibleTypes>EClassifier=Node</possibleTypes>
        <possibleTypes>EClassifier=StateMachine</possibleTypes>
        <possibleTypes>EClassifier=Activity</possibleTypes>
        <possibleTypes>EClassifier=Behavior</possibleTypes>
        <possibleTypes>EClassifier=UseCase</possibleTypes>
        <possibleTypes>EClassifier=Interaction</possibleTypes>
        <possibleTypes>EClassifier=Stereotype</possibleTypes>
        <possibleTypes>EClassifier=ProtocolStateMachine</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.eContainer(uml::Model)/]" startingPoint="//@modelElements.2">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EObjectResult" interpreter="mtl">
        <value href="example.uml#_w8FzIJBjEd2MY5zfT4Awfg"/>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Model</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.eContainer(uml::Package).name+' Subject'/]" startingPoint="//@modelElements.2">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="org.eclipse.acceleo.java Subject"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.eContainer(uml::Package)/]" startingPoint="//@modelElements.2">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EObjectResult" interpreter="mtl">
        <value href="example.uml#_Tj-XsJBlEd2MY5zfT4Awfg"/>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Package</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.eContents()->filter(uml::Activity)->asSequence()->first()/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EmptyResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Activity</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.eContents()->filter(uml::Package)->last()/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EObjectResult" interpreter="mtl">
        <value href="example.uml#_Tj-XsJBlEd2MY5zfT4Awfg"/>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Package</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.eContents()->select(eObject | eObject.oclIsKindOf(uml::Class) or eObject.oclIsKindOf(uml::Component) or eObject.oclIsKindOf(uml::Package))/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_GUaJoJBmEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_k9nKwJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_queWIJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_rRaEEJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_sSj_EJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_3iZnsHDDEeSjq5wVpgsUQA"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Class)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=Component)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=Package)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.eContents()->select(e | not e.oclIsTypeOf(uml::Comment))/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_GUaJoJBmEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_pC1TsJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_A96esJBpEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_gG4FUJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_k9nKwJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_queWIJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_rRaEEJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_sSj_EJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_3iZnsHDDEeSjq5wVpgsUQA"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_hPZ4sHcDEeS_LcjX3XW_Qg"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=EAnnotation)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=StringExpression)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=Constraint)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=ElementImport)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=PackageImport)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=TemplateBinding)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=TemplateSignature)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=PackageMerge)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=PackageableElement)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=ProfileApplication)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[element->filter(uml::Classifier)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:SetResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_k9nKwJBqEd2MY5zfT4Awfg"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Set(EClassifier=Classifier)</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="element" value="//@modelElements.4"/>
  </queries>
  <queries expression="[element->filter(uml::Property)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:SetResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_JrASAJBmEd2MY5zfT4Awfg"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Set(EClassifier=Property)</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="element" value="//@modelElements.2"/>
  </queries>
  <queries expression="[self.eContainer(uml::Package)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EmptyResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Package</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.memberEnd->at(1)/]" startingPoint="//@modelElements.6">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EObjectResult" interpreter="mtl">
        <value href="example.uml#_A96esZBpEd2MY5zfT4Awfg"/>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Property</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.memberEnd->at(2)/]" startingPoint="//@modelElements.6">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EObjectResult" interpreter="mtl">
        <value href="example.uml#_A97FwZBpEd2MY5zfT4Awfg"/>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Property</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.name+'_call'/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="model_call"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclIsTypeOf(uml::Operation)/]" startingPoint="//@modelElements.3">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=ActivityPartition) is type of EClassifierLiteral=Operation" endPosition="32"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.memberEnd->at(1)->filter(uml::Property)->asSequence()->first()/]" startingPoint="//@modelElements.6">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EObjectResult" interpreter="mtl">
        <value href="example.uml#_A96esZBpEd2MY5zfT4Awfg"/>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Property</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.memberEnd->at(1)->filter(uml::Property)/]" startingPoint="//@modelElements.6">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:SetResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_A96esZBpEd2MY5zfT4Awfg"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Set(EClassifier=Property)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.memberEnd->at(1).name+'To'+self.memberEnd->at(2).name.toUpperFirst()/]" startingPoint="//@modelElements.6">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="parentToChildren"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.memberEnd->at(1).name.toUpperFirst()/]" startingPoint="//@modelElements.6">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="Parent"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.findTypeByName('String')/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EObjectResult" interpreter="mtl">
        <value href="example.uml#_bFkDkJCWEd2Xeb6Jt2sbCQ"/>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>org.eclipse.uml2.uml.Type</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
    <pluginsInClassPath>org.eclipse.acceleo.query.tests</pluginsInClassPath>
  </queries>
  <queries expression="[self.getAllAvailableRootPackages()->union(self.getAllAvailableRootPackages().eAllContents()->filter(uml::Classifier))->union(self.getAllAvailableRootPackages().eAllContents()->filter(uml::Operation))/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_w8FzIJBjEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_GUaJoJBmEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_pC1TsJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_A96esJBpEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_gG4FUJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_k9nKwJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_queWIJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_rRaEEJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_sSj_EJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_3iZnsHDDEeSjq5wVpgsUQA"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_G1LiIJBrEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_bFkDkJCWEd2Xeb6Jt2sbCQ"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_cHO78JCWEd2Xeb6Jt2sbCQ"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_q-uUoJCWEd2Xeb6Jt2sbCQ"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_eRVrwHDGEeSjq5wVpgsUQA"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_YRLRMJBmEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_ZrDOMJBmEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_jNYjQJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_tLZEgJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_Fr5JgHGWEeSAasxVx1szDQ"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(org.eclipse.uml2.uml.Package)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=Operation)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=Classifier)</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
    <pluginsInClassPath>org.eclipse.acceleo.query.tests</pluginsInClassPath>
  </queries>
  <queries expression="[self.getApplicableStereotypes().getProfile()->asOrderedSet()->asSequence()/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Profile)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.getAppliedStereotypes()->size() > 0/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.getValidsForComponentDiagram()->select(eObject | eObject.oclIsKindOf(uml::Class) or eObject.oclIsKindOf(uml::Component) or eObject.oclIsKindOf(uml::Package))/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_w8FzIJBjEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_Tj-XsJBlEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_GUaJoJBmEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_k9nKwJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_queWIJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_rRaEEJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_sSj_EJBqEd2MY5zfT4Awfg"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Class)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=Component)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=Package)</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
    <pluginsInClassPath>org.eclipse.acceleo.query.tests</pluginsInClassPath>
  </queries>
  <queries expression="[self.eContents()->select(eObject | eObject.oclIsKindOf(uml::Class) or eObject.oclIsKindOf(uml::Component) or eObject.oclIsKindOf(uml::Package))/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_Tj-XsJBlEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_eRVrwHDGEeSjq5wVpgsUQA"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Class)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=Component)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=Package)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclAsType(uml::Property).nameExpression/]" startingPoint="//@modelElements.2">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EmptyResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=StringExpression</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.isAbstract and self.isStatic/]" startingPoint="//@modelElements.11">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.getComment()/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EmptyResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>org.eclipse.uml2.uml.Comment</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
  </queries>
  <queries expression="[self.packagedElement->filter(uml::Activity)->asSequence()->first()/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EObjectResult" interpreter="mtl">
        <value href="example.uml#_3iZnsHDDEeSjq5wVpgsUQA"/>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Activity</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.packagedElement->filter(uml::Activity)/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_3iZnsHDDEeSjq5wVpgsUQA"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Activity)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.name + 'Activity Diagram'/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:StringResult" interpreter="mtl" value="modelActivity Diagram"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.String</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[not (target.ancestors()->including(target))->includes(source)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="target" value="//@modelElements.4"/>
    <variables xsi:type="qmodel:EObjectVariable" name="source" value="//@modelElements.4"/>
  </queries>
  <queries expression="[not self.oclIsKindOf(uml::InterfaceRealization)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Model) is kind of EClassifierLiteral=InterfaceRealization" startPosition="4" endPosition="47"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[not self.oclIsKindOf(uml::Package)/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always true:&#xA;Nothing inferred when self (EClassifier=Package) is not kind of EClassifierLiteral=Package" startPosition="4" endPosition="34"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[not self.oclIsTypeOf(uml::Actor) and not self.oclIsTypeOf(uml::UseCase)/]" startingPoint="//@modelElements.7">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=InputPin) is type of EClassifierLiteral=Actor" startPosition="4" endPosition="32"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=InputPin) is type of EClassifierLiteral=UseCase" startPosition="41" endPosition="71"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[not self.oclIsTypeOf(uml::Manifestation)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Model) is type of EClassifierLiteral=Manifestation" startPosition="4" endPosition="40"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[not self.oclIsTypeOf(uml::Comment)/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Package) is type of EClassifierLiteral=Comment" startPosition="4" endPosition="34"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[not source.oclIsKindOf(uml::Association)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always true:&#xA;Nothing inferred when source (EClassifier=Association) is not kind of EClassifierLiteral=Association" startPosition="4" endPosition="40"/>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="source" value="//@modelElements.6"/>
  </queries>
  <queries expression="[not self.eContainer(uml::EncapsulatedClassifier).ownedElement->includes(object)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:InvalidResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="object" value="//@modelElements.1"/>
  </queries>
  <queries expression="[object.oclIsKindOf(uml::EncapsulatedClassifier)/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when object (EClassifier=Model) is kind of EClassifierLiteral=EncapsulatedClassifier" endPosition="47"/>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="object" value="//@modelElements.1"/>
  </queries>
  <queries expression="[object.oclIsKindOf(uml::Property)/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when object (EClassifier=Model) is kind of EClassifierLiteral=Property" endPosition="33"/>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="object" value="//@modelElements.1"/>
  </queries>
  <queries expression="[self.oclAsType(uml::Component).packagedElement->filter(uml::Package)->asSequence()->first()/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:InvalidResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
         <validationMessages severity="ERROR" message="Nothing will be left after calling oclAsType:&#xA;EClassifier=Package is not compatible with type EClassifierLiteral=Component" startPosition="4" endPosition="30"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclAsType(uml::Element).getAppliedStereotypes()/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Stereotype)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclAsType(uml::Element)/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EObjectResult" interpreter="mtl">
        <value href="example.uml#_k9nKwJBqEd2MY5zfT4Awfg"/>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Element</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclAsType(uml::StructuredClassifier).ownedAttribute->filter(uml::Port)->select(e | e.type &lt;> self)/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="manual"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Port)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclAsType(uml::StructuredClassifier).ownedAttribute/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Property)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclIsKindOf(uml::Interface) or self.oclIsKindOf(uml::Port) or self.oclIsKindOf(uml::EncapsulatedClassifier) or self.oclIsKindOf(uml::PackageableElement)/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always true:&#xA;Nothing inferred when self (EClassifier=Class) is not kind of EClassifierLiteral=EncapsulatedClassifier" startPosition="67" endPosition="112"/>
        <validationMessages message="Always true:&#xA;Nothing inferred when self (EClassifier=Class) is not kind of EClassifierLiteral=PackageableElement" startPosition="116" endPosition="157"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Class) is kind of EClassifierLiteral=Interface" endPosition="32"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Class) is kind of EClassifierLiteral=Port" startPosition="36" endPosition="63"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclIsKindOf(uml::Node) or self.oclIsKindOf(uml::Package)/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always true:&#xA;Nothing inferred when self (EClassifier=Package) is not kind of EClassifierLiteral=Package" startPosition="31" endPosition="61"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Package) is kind of EClassifierLiteral=Node" endPosition="27"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclIsKindOf(uml::Package) or self.oclIsKindOf(uml::StructuredClassifier)/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always true:&#xA;Nothing inferred when self (EClassifier=Package) is not kind of EClassifierLiteral=Package" endPosition="30"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Package) is kind of EClassifierLiteral=StructuredClassifier" startPosition="34" endPosition="77"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclIsTypeOf(uml::Package) or self.oclIsTypeOf(uml::Component) or self.oclIsTypeOf(uml::ExecutionEnvironment) or self.oclIsTypeOf(uml::Node) or self.oclIsTypeOf(uml::Device) or self.oclIsTypeOf(uml::Artifact)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Model) is type of EClassifierLiteral=Package" endPosition="30"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Model) is type of EClassifierLiteral=Component" startPosition="34" endPosition="66"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Model) is type of EClassifierLiteral=ExecutionEnvironment" startPosition="70" endPosition="113"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Model) is type of EClassifierLiteral=Node" startPosition="117" endPosition="144"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Model) is type of EClassifierLiteral=Device" startPosition="148" endPosition="177"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Model) is type of EClassifierLiteral=Artifact" startPosition="181" endPosition="212"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclIsTypeOf(uml::Property) and self.oclAsType(uml::Property).defaultValue &lt;>null/]" startingPoint="//@modelElements.2">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclIsTypeOf(uml::Property) and self.oclAsType(uml::Property).defaultValue = null/]" startingPoint="//@modelElements.2">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclIsTypeOf(uml::Property) and self.oclAsType(uml::Property).nameExpression &lt;> null/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Model) is type of EClassifierLiteral=Property" endPosition="31"/>
        <validationMessages severity="ERROR" message="Nothing will be left after calling oclAsType:&#xA;EClassifier=Model is not compatible with type EClassifierLiteral=Property" startPosition="40" endPosition="65"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclIsTypeOf(uml::Property) and self.oclAsType(uml::Property).nameExpression = null/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Model) is type of EClassifierLiteral=Property" endPosition="31"/>
        <validationMessages severity="ERROR" message="Nothing will be left after calling oclAsType:&#xA;EClassifier=Model is not compatible with type EClassifierLiteral=Property" startPosition="40" endPosition="65"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclIsTypeOf(uml::Property) or self.oclIsTypeOf(uml::Operation)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Model) is type of EClassifierLiteral=Property" endPosition="31"/>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Model) is type of EClassifierLiteral=Operation" startPosition="35" endPosition="67"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.packagedElement->select(e | e.oclIsTypeOf(uml::Package))->size()=0/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[preSource->including(preTarget)->filter(uml::Actor)->size() = 2 or preSource->including(preTarget)->filter(uml::UseCase)->size() = 2/]" startingPoint="//@modelElements.6">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="preSource" value="//@modelElements.1"/>
    <variables xsi:type="qmodel:EObjectVariable" name="preTarget" value="//@modelElements.5"/>
  </queries>
  <queries expression="[preSource->including(preTarget)->filter(uml::UseCase)->size() = 2/]" startingPoint="//@modelElements.6">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="preSource" value="//@modelElements.1"/>
    <variables xsi:type="qmodel:EObjectVariable" name="preTarget" value="//@modelElements.5"/>
  </queries>
  <queries expression="[preSource.canCreateAnInstanceSlot(preTarget)/]" startingPoint="//@modelElements.6">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
    <variables xsi:type="qmodel:EObjectVariable" name="preSource" value="//@modelElements.10"/>
    <variables xsi:type="qmodel:EObjectVariable" name="preTarget" value="//@modelElements.10"/>
    <pluginsInClassPath>org.eclipse.acceleo.query.tests</pluginsInClassPath>
  </queries>
  <queries expression="[preSource.candidatesForSlot()->filter(uml::Property)->size()>0/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
    <variables xsi:type="qmodel:EObjectVariable" name="preSource" value="//@modelElements.10"/>
    <pluginsInClassPath>org.eclipse.acceleo.query.tests</pluginsInClassPath>
  </queries>
  <queries expression="[preSource.oclIsKindOf(uml::Classifier)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when preSource (EClassifier=Model) is kind of EClassifierLiteral=Classifier" endPosition="38"/>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="preSource" value="//@modelElements.1"/>
  </queries>
  <queries expression="[preTarget->filter(uml::TemplateableElement).ownedTemplateSignature.ownedParameter&lt;>null/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="preTarget" value="//@modelElements.1"/>
  </queries>
  <queries expression="[preTarget.oclIsKindOf(uml::Classifier)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when preTarget (EClassifier=Model) is kind of EClassifierLiteral=Classifier" endPosition="38"/>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="preTarget" value="//@modelElements.1"/>
  </queries>
  <queries expression="[preTarget.oclIsKindOf(uml::Component)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when preTarget (EClassifier=Model) is kind of EClassifierLiteral=Component" endPosition="37"/>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="preTarget" value="//@modelElements.1"/>
  </queries>
  <queries expression="[self.redefinedPort->size() > 0/]" startingPoint="//@modelElements.0">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.represents &lt;>null and self.clientDependency->size() > 0/]" startingPoint="//@modelElements.3">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.represents = null and self.clientDependency->size() = 1/]" startingPoint="//@modelElements.3">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.represents = null and self.clientDependency->size()>1/]" startingPoint="//@modelElements.3">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.selection.oclAsType(uml::UseCase).subject->size() = 0/]" startingPoint="//@modelElements.7">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="manual"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <validationMessages severity="ERROR" message="Nothing will be left after calling oclAsType:&#xA;EClassifier=Behavior is not compatible with type EClassifierLiteral=UseCase" startPosition="14" endPosition="38"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.selection.oclAsType(uml::UseCase).subject->size() > 0/]" startingPoint="//@modelElements.7">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:InvalidResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <validationMessages severity="ERROR" message="Nothing will be left after calling oclAsType:&#xA;EClassifier=Behavior is not compatible with type EClassifierLiteral=UseCase" startPosition="14" endPosition="38"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.selection.oclIsTypeOf(uml::Actor)/]" startingPoint="//@modelElements.7">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="manual"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.selection.oclIsTypeOf(uml::Classifier)/]" startingPoint="//@modelElements.7">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="manual"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.selection.oclIsTypeOf(uml::UseCase)/]" startingPoint="//@modelElements.7">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="manual"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self->filter(uml::Lifeline).represents->filter(uml::Property)->size() >0/]" startingPoint="//@modelElements.0">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self->including(self.getSource())->including(self.getTarget())/]" startingPoint="//@modelElements.6">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:SetResult" interpreter="manual">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_A96esJBpEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_A96esZBpEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_A97FwZBpEd2MY5zfT4Awfg"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Set(EClassifier=Association)</possibleTypes>
        <possibleTypes>Set(org.eclipse.uml2.uml.Property)</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
    <pluginsInClassPath>org.eclipse.acceleo.query.tests</pluginsInClassPath>
  </queries>
  <queries expression="[self->including(self.getStereotypeApplications())/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:SetResult" interpreter="manual">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_k9nKwJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:ListResult"/>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Set(EClassifier=Class)</possibleTypes>
        <possibleTypes>Set(Sequence(EClassifier=EObject))</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.eContainer() &lt;> container/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="container" value="//@modelElements.1"/>
  </queries>
  <queries expression="[self.eContents()->filter(uml::Activity)/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Activity)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.eContents()->filter(uml::Interaction)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Interaction)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.eContents()->filter(uml::StateMachine)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_eRVrwHDGEeSjq5wVpgsUQA"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=StateMachine)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclAsType(uml::Element).getApplicableStereotypes()->asSet()->union(self.oclAsType(uml::Element).getApplicableStereotypes().getProfile()->asSet())/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:SetResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Set(EClassifier=Stereotype)</possibleTypes>
        <possibleTypes>Set(EClassifier=Profile)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclIsKindOf(uml::Class)/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always true:&#xA;Nothing inferred when self (EClassifier=Class) is not kind of EClassifierLiteral=Class" endPosition="28"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclIsKindOf(uml::Package)/]" startingPoint="//@modelElements.5">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always true:&#xA;Nothing inferred when self (EClassifier=Package) is not kind of EClassifierLiteral=Package" endPosition="30"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.packagedElement->filter(uml::InstanceSpecification).classifier->asOrderedSet()->asSequence()->select(e | e.oclIsTypeOf(uml::Class) or e.oclIsTypeOf(uml::DataType))/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Class)</possibleTypes>
        <possibleTypes>Sequence(EClassifier=DataType)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.packagedElement->filter(uml::InstanceSpecification).classifier->asOrderedSet()->asSequence()/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Classifier)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.packagedElement->filter(uml::InstanceSpecification).classifier->select(e | e.oclIsTypeOf(uml::Enumeration))->asOrderedSet()->asSequence()/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Enumeration)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[source.eContainer(uml::Interaction)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EmptyResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Interaction</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="source" value="//@modelElements.4"/>
  </queries>
  <queries expression="[source.eContainer(uml::Model)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EObjectResult" interpreter="mtl">
        <value href="example.uml#_w8FzIJBjEd2MY5zfT4Awfg"/>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Model</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="source" value="//@modelElements.4"/>
  </queries>
  <queries expression="[source.eContainer(uml::Package)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EObjectResult" interpreter="mtl">
        <value href="example.uml#_Tj-XsJBlEd2MY5zfT4Awfg"/>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Package</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="source" value="//@modelElements.4"/>
  </queries>
  <queries expression="[source.eContainer(uml::Region)/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EmptyResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=Region</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="source" value="//@modelElements.4"/>
  </queries>
  <queries expression="[target.oclAsType(ecore::EModelElement).eAnnotations/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=EAnnotation)</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="target" value="//@modelElements.4"/>
  </queries>
  <queries expression="[target.oclIsKindOf(uml::Interface)/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when target (EClassifier=Class) is kind of EClassifierLiteral=Interface" endPosition="34"/>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="target" value="//@modelElements.4"/>
  </queries>
  <queries expression="[target.ownedTemplateSignature/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EmptyResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=TemplateSignature</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="target" value="//@modelElements.4"/>
  </queries>
  <queries expression="[uml::AggregationKind::composite/]" startingPoint="//@modelElements.1">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:EnumeratorResult" interpreter="mtl" value="composite"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>EClassifier=AggregationKind</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.value->select(value | not (value.owner.oclAsType(uml::Slot).definingFeature.oclAsType(uml::Property).isComposite) )->filter(uml::InstanceValue).instance/]" startingPoint="//@modelElements.8">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=InstanceSpecification)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.value->select(value | value.owner.oclAsType(uml::Slot).definingFeature.oclAsType(uml::Property).isComposite )->filter(uml::InstanceValue).instance/]" startingPoint="//@modelElements.8">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=InstanceSpecification)</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclAsType(uml::Element).ownedElement->includes(object)/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="object" value="//@modelElements.8"/>
  </queries>
  <queries expression="[self.oclAsType(uml::EncapsulatedClassifier).ownedElement->includes(object)/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
    <variables xsi:type="qmodel:EObjectVariable" name="object" value="//@modelElements.2"/>
  </queries>
  <queries expression="[self.oclIsKindOf(uml::EncapsulatedClassifier)/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl" value="true"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always true:&#xA;Nothing inferred when self (EClassifier=Class) is not kind of EClassifierLiteral=EncapsulatedClassifier" endPosition="45"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.oclIsKindOf(uml::InterfaceRealization)/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
        <validationMessages message="Always false:&#xA;Nothing inferred when self (EClassifier=Class) is kind of EClassifierLiteral=InterfaceRealization" endPosition="43"/>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.visibility&lt;>uml::VisibilityKind::public/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:BooleanResult" interpreter="mtl"/>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>java.lang.Boolean</possibleTypes>
      </expectedResult>
    </expectations>
  </queries>
  <queries expression="[self.getAllAvailableRootPackages()/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_w8FzIJBjEd2MY5zfT4Awfg"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(org.eclipse.uml2.uml.Package)</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
    <pluginsInClassPath>org.eclipse.acceleo.query.tests</pluginsInClassPath>
  </queries>
  <queries expression="[self.getAllAvailableRootPackages().eAllContents()->filter(uml::Classifier)/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_GUaJoJBmEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_pC1TsJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_A96esJBpEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_gG4FUJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_k9nKwJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_queWIJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_rRaEEJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_sSj_EJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_3iZnsHDDEeSjq5wVpgsUQA"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_G1LiIJBrEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_bFkDkJCWEd2Xeb6Jt2sbCQ"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_cHO78JCWEd2Xeb6Jt2sbCQ"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_q-uUoJCWEd2Xeb6Jt2sbCQ"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_eRVrwHDGEeSjq5wVpgsUQA"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Classifier)</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
    <pluginsInClassPath>org.eclipse.acceleo.query.tests</pluginsInClassPath>
  </queries>
  <queries expression="[self.getAllAvailableRootPackages().eAllContents()->filter(uml::Operation)/]" startingPoint="//@modelElements.4">
    <expectations xsi:type="qmodel:QueryEvaluationResultExpectation">
      <expectedResult xsi:type="qmodel:ListResult" interpreter="mtl">
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_YRLRMJBmEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_ZrDOMJBmEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_jNYjQJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_tLZEgJBqEd2MY5zfT4Awfg"/>
        </values>
        <values xsi:type="qmodel:EObjectResult">
          <value href="example.uml#_Fr5JgHGWEeSAasxVx1szDQ"/>
        </values>
      </expectedResult>
    </expectations>
    <expectations xsi:type="qmodel:QueryValidationResultExpectation">
      <expectedResult interpreter="manual">
        <possibleTypes>Sequence(EClassifier=Operation)</possibleTypes>
      </expectedResult>
    </expectations>
    <classesToImport>org.eclipse.acceleo.query.tests.services.UMLServices</classesToImport>
    <pluginsInClassPath>org.eclipse.acceleo.query.tests</pluginsInClassPath>
  </queries>
  <modelElements name="APort">
    <target href="example.uml#_eD4KIHb-EeS_LcjX3XW_Qg"/>
  </modelElements>
  <modelElements name="TheModel">
    <target href="example.uml#_w8FzIJBjEd2MY5zfT4Awfg"/>
  </modelElements>
  <modelElements name="PersonName">
    <target href="example.uml#_JrASAJBmEd2MY5zfT4Awfg"/>
  </modelElements>
  <modelElements name="ActivityPartition">
    <target href="example.uml#_M5h9UHDEEeSjq5wVpgsUQA"/>
  </modelElements>
  <modelElements name="AClass">
    <target href="example.uml#_k9nKwJBqEd2MY5zfT4Awfg"/>
  </modelElements>
  <modelElements name="APackage">
    <target href="example.uml#_Tj-XsJBlEd2MY5zfT4Awfg"/>
  </modelElements>
  <modelElements name="AnAssociation">
    <target href="example.uml#_A96esJBpEd2MY5zfT4Awfg"/>
  </modelElements>
  <modelElements name="InputPin">
    <target href="example.uml#_2nErwHcBEeS_LcjX3XW_Qg"/>
  </modelElements>
  <modelElements name="Slot">
    <target href="example.uml#_5l6pMHcGEeS_LcjX3XW_Qg"/>
  </modelElements>
  <modelElements name="AnInterface">
    <target href="example.uml#_gG4FUJBqEd2MY5zfT4Awfg"/>
  </modelElements>
  <modelElements name="AnInstanceSpecification">
    <target href="example.uml#_hPZ4sHcDEeS_LcjX3XW_Qg"/>
  </modelElements>
  <modelElements name="AnOperation">
    <target href="example.uml#_YRLRMJBmEd2MY5zfT4Awfg"/>
  </modelElements>
</qmodel:Queries>
